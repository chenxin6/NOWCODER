/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
import java.util.ArrayList;
import java.util.HashMap;
public class Solution {
    public static UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
    	if (node == null) {
    		return null;
    	}	
        ArrayList<UndirectedGraphNode> list = new ArrayList<>();
        HashMap<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>();
        UndirectedGraphNode result = new UndirectedGraphNode(node.label);
        map.put(node, result);
        list.add(node);
        while (!list.isEmpty()) {
        	UndirectedGraphNode temp = list.remove(0);
        	for (UndirectedGraphNode temp2 : temp.neighbors) {
            	if (map.get(temp2) == null) {
            		UndirectedGraphNode temp2Clone = new UndirectedGraphNode(temp2.label);
            		map.put(temp2, temp2Clone);
            		list.add(temp2);            		
            	}
          		map.get(temp).neighbors.add(map.get(temp2));
			}
        }
        return result;
    }
}